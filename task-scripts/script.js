/* eslint-disable max-lines, no-control-regex */
import { readdirSync, readFileSync, statSync, writeFileSync, unlinkSync, renameSync, existsSync } from 'node:fs';

import { join, resolve, dirname } from 'node:path';

const rootPath = '../';
const absolutePath = resolve(rootPath);

// üîπ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const safeReaddir = (path) => {
  try {
    return readdirSync(path);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', err.message);
    return [];
  }
};

// üîπ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º kyu
const kyuPaths = safeReaddir(absolutePath)
  .filter((name) => statSync(join(absolutePath, name)).isDirectory() && name.startsWith('kyu'))
  .map((name) => join(absolutePath, name));

// üîπ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏ kyu
const allTaskPaths = kyuPaths.flatMap((kyu) => safeReaddir(kyu).map((task) => join(kyu, task)));

// üîπ –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ ID
async function getTaskMetadata(id) {
  const res = await fetch(`https://www.codewars.com/api/v1/code-challenges/${id}`);
  if (!res.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ ID: ${id}`);
  }

  const data = await res.json();

  return {
    id: data.id,
    name: data.name,
    url: data.url,
    rank: data.rank?.name || 'unknown',
    slug: data.slug,
    category: data.category,
    description: cleanDescription(data.description),
  };
}

// üîπ –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (Codewars –∏–º–µ–µ—Ç —É—Å–ª–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏)
function cleanDescription(desc, lang = 'javascript') {
  desc = desc.replace(/~~~if-not:([^\n]*)\n([\s\S]*?)~~~/g, (match, langs, content) => {
    const list = langs.split(',').map((s) => s.trim().toLowerCase());
    return list.includes(lang.toLowerCase()) ? '' : content;
  });

  desc = desc.replace(/~~~if:([^\n]*)\n([\s\S]*?)~~~/g, (match, langs, content) => {
    const list = langs.split(',').map((s) => s.trim().toLowerCase());
    return list.includes(lang.toLowerCase()) ? content : '';
  });

  desc = desc.replace(/~~~(if|if-not)[^\n]*\n?/g, '');
  return desc.replace(/~~~/g, '```');
}

// üîπ –°–æ–∑–¥–∞–Ω–∏–µ README.md –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function createReadme(taskPath, metadata) {
  const content = `# ${metadata.name}

**Rank:** ${metadata.rank}  
**Category:** ${metadata.category}  
**URL:** [${metadata.url}](${metadata.url})

---

## üìù Description

${metadata.description.trim()}
`;

  const readmePath = join(taskPath, 'README.md');
  writeFileSync(readmePath, content, { encoding: 'utf-8' });
  console.log(`‚úÖ README.md —Å–æ–∑–¥–∞–Ω: ${readmePath}`);

  // –£–¥–∞–ª—è–µ–º DESCRIPTION.txt –∏ taskId.txt
  deleteIfExists(taskPath, 'DESCRIPTION.txt');
  deleteIfExists(taskPath, 'taskId.txt');

  // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞–ø–∫—É
  renameTaskFolder(taskPath, metadata.slug);
}

// üîπ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
function deleteIfExists(dir, fileName) {
  const filePath = join(dir, fileName);
  if (existsSync(filePath)) {
    try {
      unlinkSync(filePath);
      console.log(`üóëÔ∏è –£–¥–∞–ª—ë–Ω: ${filePath}`);
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${fileName}:`, err.message);
    }
  }
}

// üîπ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∑–∞–¥–∞—á–∏
// üîπ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∑–∞–¥–∞—á–∏ (—Å –æ—á–∏—Å—Ç–∫–æ–π –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)
function renameTaskFolder(taskPath, slug) {
  const parentDir = dirname(taskPath);
  const folderName = taskPath.split(/[/\\]/).pop(); // —Ç–µ–∫—É—â–µ–µ –∏–º—è –ø–∞–ø–∫–∏

  // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ "_001__" –∏ "Even_Or_Odd"
  const match = folderName.match(/^(_+\d+__)(.*)$/);
  if (!match) {
    console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${folderName} ‚Äî —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç _001__...`);
    return;
  }

  const [, prefix] = match;

  // –û—á–∏—Å—Ç–∫–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
  const sanitizedSlug = slug
    .replace(/[<>:"/\\|?*\x00-\x1F]/g, '') // —É–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –≤ Windows —Å–∏–º–≤–æ–ª—ã
    .replace(/\s+/g, '_') // –ø—Ä–æ–±–µ–ª—ã ‚Üí _
    .replace(/[.]+$/g, '') // —É–¥–∞–ª—è–µ–º —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
    .trim();

  const newFolderName = `${prefix}${sanitizedSlug}`;
  const newPath = join(parentDir, newFolderName);

  try {
    renameSync(taskPath, newPath);
    console.log(`üìÅ –ü–∞–ø–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞:\n   ${folderName} ‚Üí ${newFolderName}`);
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ ${folderName}:`, err.message);
  }
}

// üöÄ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
for (const task of allTaskPaths) {
  const files = safeReaddir(task);
  if (files.includes('taskId.txt')) {
    const id = readFileSync(join(task, 'taskId.txt'), { encoding: 'utf-8' }).trim();
    try {
      const metadata = await getTaskMetadata(id);
      createReadme(task, metadata);
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ ${id}:`, err.message);
    }
  }
}
