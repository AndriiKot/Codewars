def order_weight(string)
  string.split.sort_by { |n| [n.chars.map(&:to_i).reduce(:+), n] }.join(" ")
end

В данном коде на Ruby, 
который вы предоставили, 
используется метод sort_by для сортировки строк в массиве. 
Давайте подробно разберем, что происходит 
в части sort_by { |n| [n.chars.map(&:to_i).reduce(:+), n] }.

n.chars - этот метод разбивает строку n 
на массив символов. Например, 
если n равно "123", то n.chars вернет ["1", "2", "3"].

map(&:to_i) - этот метод применяет 
функцию to_i к каждому элементу массива, 
преобразуя символы в целые числа. 
В случае с массивом ["1", "2", "3"] мы получим [1, 2, 3].

reduce(:+) - этот метод суммирует 
все элементы массива. 
Для массива [1, 2, 3] он вернет 6, так как 1 + 2 + 3 = 6.

[n.chars.map(&:to_i).reduce(:+), n] - здесь создается массив, 
состоящий из двух элементов: суммы цифр строки n и самой строки n. 
Например, для строки "123" это будет [6, "123"].

sort_by - метод сортирует массив на основе значений, 
возвращаемых блоком. В данном случае массивы, 
которые создаются на шаге 4, 
будут отсортированы сначала по сумме цифр, 
а затем по самой строке. 
Это достигается благодаря тому, 
что в массиве [6, "123"] 
Ruby выполнит сортировку по 
первому элементу (сумме) и, 
в случае равенства, по второму элементу (строке).

Таким образом, [] в данном контексте 
используется для создания массива, 
который будет использоваться для сортировки. 
Внутри блока sort_by создается массив, 
который содержит два значения, 
что позволяет сортировать 
строки по двум критериям: по сумме цифр и по самой строке.
